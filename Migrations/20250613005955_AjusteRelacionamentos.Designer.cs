// <auto-generated />
using System;
using HOSPISIM.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HOSPISIM.Migrations
{
    [DbContext(typeof(VidaPlenaDbContext))]
    [Migration("20250613005955_AjusteRelacionamentos")]
    partial class AjusteRelacionamentos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HOSPISIM.Entities.AltaHospitalar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CondicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrucoesPosAlta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InternacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternacaoId")
                        .IsUnique();

                    b.ToTable("AltasHospitalares");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CondicaoPaciente = "Estável",
                            Data = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Manter repouso por 7 dias e tomar antibióticos conforme prescrição.",
                            InternacaoId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-ffff-1111-2222-333344445555"),
                            CondicaoPaciente = "Recuperado",
                            Data = new DateTime(2024, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Evitar atividades estressantes e seguir acompanhamento ambulatorial.",
                            InternacaoId = new Guid("88888888-9999-aaaa-bbbb-ccccdddddddd")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000006d"),
                            CondicaoPaciente = "Estável com necessidade de acompanhamento",
                            Data = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Consultar cardiologista mensalmente e manter dieta hipossódica.",
                            InternacaoId = new Guid("00000000-0000-0000-0000-00000000006c")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000007d"),
                            CondicaoPaciente = "Boa, com controle da sintomatologia",
                            Data = new DateTime(2025, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Evitar alimentos ácidos e condimentados; manter uso de medicação conforme prescrito.",
                            InternacaoId = new Guid("00000000-0000-0000-0000-00000000007c")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000089"),
                            CondicaoPaciente = "Estável, com pressão arterial controlada",
                            Data = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Evitar esforços físicos por 15 dias, manter consulta de retorno em 1 semana.",
                            InternacaoId = new Guid("00000000-0000-0000-0000-000000000088")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            CondicaoPaciente = "Estável, com acompanhamento ambulatorial indicado",
                            Data = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Realizar sessões de fisioterapia, evitar carga no membro afetado.",
                            InternacaoId = new Guid("10000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000009"),
                            CondicaoPaciente = "Estável com orientações para ajuste terapêutico domiciliar",
                            Data = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Continuar monitoramento domiciliar da glicose e retorno em 30 dias.",
                            InternacaoId = new Guid("20000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000009"),
                            CondicaoPaciente = "Pressão controlada, orientação para reavaliação periódica",
                            Data = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Aderir à medicação, controlar dieta e praticar atividades físicas leves.",
                            InternacaoId = new Guid("30000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000009"),
                            CondicaoPaciente = "Melhora significativa",
                            Data = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Manter tratamento dermatológico e retorno em 15 dias.",
                            InternacaoId = new Guid("40000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("37777777-0000-0000-0000-222222222222"),
                            CondicaoPaciente = "Estável",
                            Data = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Retornar para consulta de acompanhamento em 15 dias.",
                            InternacaoId = new Guid("27777777-0000-0000-0000-111111111111")
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProntuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("ProntuarioId");

                    b.ToTable("Atendimentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            DataHora = new DateTime(2024, 6, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 01",
                            PacienteId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ProfissionalId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ProntuarioId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Realizado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            DataHora = new DateTime(2024, 11, 20, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Consultório 03",
                            PacienteId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ProfissionalId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            ProntuarioId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Status = "Agendado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000069"),
                            DataHora = new DateTime(2025, 1, 18, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Local = "Ambulatório Cardiologia",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000065"),
                            ProfissionalId = new Guid("00000000-0000-0000-0000-000000000068"),
                            ProntuarioId = new Guid("00000000-0000-0000-0000-000000000066"),
                            Status = "Em andamento",
                            Tipo = "Retorno"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000079"),
                            DataHora = new DateTime(2025, 2, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Clínica de Especialidades, Sala 7",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000075"),
                            ProfissionalId = new Guid("00000000-0000-0000-0000-000000000078"),
                            ProntuarioId = new Guid("00000000-0000-0000-0000-000000000076"),
                            Status = "Finalizado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000085"),
                            DataHora = new DateTime(2025, 3, 15, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Local = "Pronto Atendimento 24h - Cardiologia",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000081"),
                            ProfissionalId = new Guid("00000000-0000-0000-0000-000000000084"),
                            ProntuarioId = new Guid("00000000-0000-0000-0000-000000000082"),
                            Status = "Encaminhado",
                            Tipo = "Emergência"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            DataHora = new DateTime(2025, 4, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Ambulatório Ortopedia - Sala 12",
                            PacienteId = new Guid("10000000-0000-0000-0000-000000000001"),
                            ProfissionalId = new Guid("10000000-0000-0000-0000-000000000004"),
                            ProntuarioId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Status = "Realizado",
                            Tipo = "Consulta Pós-Cirúrgica"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000005"),
                            DataHora = new DateTime(2025, 5, 15, 8, 45, 0, 0, DateTimeKind.Unspecified),
                            Local = "Consultório Endocrinologia - Sala 02",
                            PacienteId = new Guid("20000000-0000-0000-0000-000000000001"),
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000004"),
                            ProntuarioId = new Guid("20000000-0000-0000-0000-000000000002"),
                            Status = "Realizado",
                            Tipo = "Consulta de Rotina"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            DataHora = new DateTime(2025, 3, 10, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            Local = "Clínica Cardiológica - Sala 1",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000001"),
                            ProfissionalId = new Guid("30000000-0000-0000-0000-000000000004"),
                            ProntuarioId = new Guid("30000000-0000-0000-0000-000000000002"),
                            Status = "Realizado",
                            Tipo = "Consulta de Especialidade"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000005"),
                            DataHora = new DateTime(2025, 5, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Ambulatório - Sala 4",
                            PacienteId = new Guid("40000000-0000-0000-0000-000000000001"),
                            ProfissionalId = new Guid("40000000-0000-0000-0000-000000000004"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000002"),
                            Status = "Realizado",
                            Tipo = "Consulta Dermatológica"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000000"),
                            DataHora = new DateTime(2024, 12, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Consultório 12",
                            PacienteId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ProfissionalId = new Guid("77777777-0000-0000-0000-888888888888"),
                            ProntuarioId = new Guid("33333333-0000-0000-0000-444444444444"),
                            Status = "Concluído",
                            Tipo = "Exame"
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Nome = "Clínica Geral"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Nome = "Neurologia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000067"),
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000077"),
                            Nome = "Gastroenterologia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000083"),
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Nome = "Ortopedia"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            Nome = "Endocrinologia"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            Nome = "Dermatologia"
                        },
                        new
                        {
                            Id = new Guid("55555555-0000-0000-0000-666666666666"),
                            Nome = "Cardiologia"
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataRealizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.ToTable("Exames");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AtendimentoId = new Guid("55555555-5555-5555-5555-555555555555"),
                            DataRealizacao = new DateTime(2025, 6, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 5, 30, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Dentro dos parâmetros normais",
                            Tipo = "Hemograma"
                        },
                        new
                        {
                            Id = new Guid("11111111-2222-3333-4444-555566667777"),
                            AtendimentoId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            DataRealizacao = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Sem alterações significativas",
                            Tipo = "Ressonância Magnética"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000006b"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000069"),
                            DataRealizacao = new DateTime(2025, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Presença de arritmia leve",
                            Tipo = "Eletrocardiograma"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000007b"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000079"),
                            DataRealizacao = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Presença de esofagite grau A",
                            Tipo = "Endoscopia Digestiva"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000087"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000085"),
                            DataRealizacao = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Taquicardia sinusal detectada",
                            Tipo = "Eletrocardiograma"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            AtendimentoId = new Guid("10000000-0000-0000-0000-000000000005"),
                            DataRealizacao = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Consolidação óssea adequada.",
                            Tipo = "Raio-X do Tornozelo"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000007"),
                            AtendimentoId = new Guid("20000000-0000-0000-0000-000000000005"),
                            DataRealizacao = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "6.9% - dentro da meta para controle glicêmico.",
                            Tipo = "Hemoglobina Glicada"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000007"),
                            AtendimentoId = new Guid("30000000-0000-0000-0000-000000000005"),
                            DataRealizacao = new DateTime(2025, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Ritmo sinusal, sem anormalidades detectadas",
                            Tipo = "Eletrocardiograma"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000007"),
                            AtendimentoId = new Guid("40000000-0000-0000-0000-000000000005"),
                            DataRealizacao = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Compatível com eczema crônico",
                            Tipo = "Biópsia de pele"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-0000-0000-0000-000000000000"),
                            AtendimentoId = new Guid("55555555-5555-5555-5555-555555555555"),
                            DataRealizacao = new DateTime(2024, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Alterações leves no fígado",
                            Tipo = "Ultrassonografia"
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.Internacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime2");

                    b.Property<string>("Leito")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotivoInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesClinicas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanoSaudeUtilizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrevisaoAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quarto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Setor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId")
                        .IsUnique();

                    b.HasIndex("PacienteId");

                    b.ToTable("Internacoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AtendimentoId = new Guid("55555555-5555-5555-5555-555555555555"),
                            DataEntrada = new DateTime(2025, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "12B",
                            MotivoInternacao = "Pneumonia",
                            ObservacoesClinicas = "Paciente responde bem ao tratamento.",
                            PacienteId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "301",
                            Setor = "Clínico",
                            StatusInternacao = "Ativo"
                        },
                        new
                        {
                            Id = new Guid("88888888-9999-aaaa-bbbb-ccccdddddddd"),
                            AtendimentoId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            DataEntrada = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "05A",
                            MotivoInternacao = "Crise convulsiva",
                            ObservacoesClinicas = "Paciente em observação contínua.",
                            PacienteId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PlanoSaudeUtilizado = "Particular",
                            PrevisaoAlta = new DateTime(2024, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "102",
                            Setor = "Neurologia",
                            StatusInternacao = "Ativo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000006c"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000069"),
                            DataEntrada = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "22C",
                            MotivoInternacao = "Avaliação cardíaca intensiva",
                            ObservacoesClinicas = "Paciente sob cuidados cardíacos contínuos.",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000065"),
                            PlanoSaudeUtilizado = "Amil",
                            PrevisaoAlta = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "204",
                            Setor = "Cardiologia",
                            StatusInternacao = "Em observação"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000007c"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000079"),
                            DataEntrada = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "12B",
                            MotivoInternacao = "Exames e acompanhamento de distúrbios gastrointestinais",
                            ObservacoesClinicas = "Paciente sob dieta controlada e monitoramento.",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000075"),
                            PlanoSaudeUtilizado = "Bradesco Saúde",
                            PrevisaoAlta = new DateTime(2025, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "310",
                            Setor = "Gastroenterologia",
                            StatusInternacao = "Concluída"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000088"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000085"),
                            DataEntrada = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "08C",
                            MotivoInternacao = "Controle e estabilização de quadro cardíaco",
                            ObservacoesClinicas = "Paciente com bom prognóstico após estabilização.",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000081"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "205",
                            Setor = "Cardiologia",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            AtendimentoId = new Guid("10000000-0000-0000-0000-000000000005"),
                            DataEntrada = new DateTime(2025, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "04B",
                            MotivoInternacao = "Cirurgia de reconstrução óssea do tornozelo",
                            ObservacoesClinicas = "Paciente respondeu bem à cirurgia e iniciou fisioterapia.",
                            PacienteId = new Guid("10000000-0000-0000-0000-000000000001"),
                            PlanoSaudeUtilizado = "SUS",
                            PrevisaoAlta = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "107",
                            Setor = "Ortopedia",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000008"),
                            AtendimentoId = new Guid("20000000-0000-0000-0000-000000000005"),
                            DataEntrada = new DateTime(2025, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "12C",
                            MotivoInternacao = "Descompensação glicêmica aguda",
                            ObservacoesClinicas = "Paciente respondeu bem à insulinoterapia.",
                            PacienteId = new Guid("20000000-0000-0000-0000-000000000001"),
                            PlanoSaudeUtilizado = "Amil Saúde",
                            PrevisaoAlta = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "204",
                            Setor = "Clínica Médica",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000008"),
                            AtendimentoId = new Guid("30000000-0000-0000-0000-000000000005"),
                            DataEntrada = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "06B",
                            MotivoInternacao = "Pico hipertensivo com cefaleia intensa",
                            ObservacoesClinicas = "Paciente estabilizado após controle da pressão arterial.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000001"),
                            PlanoSaudeUtilizado = "Bradesco Saúde",
                            PrevisaoAlta = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "110",
                            Setor = "Cardiologia",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000008"),
                            AtendimentoId = new Guid("40000000-0000-0000-0000-000000000005"),
                            DataEntrada = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "12C",
                            MotivoInternacao = "Infecção secundária em lesão dermatológica",
                            ObservacoesClinicas = "Lesões extensas com sinais de infecção bacteriana.",
                            PacienteId = new Guid("40000000-0000-0000-0000-000000000001"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "207",
                            Setor = "Clínica Médica",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("27777777-0000-0000-0000-111111111111"),
                            AtendimentoId = new Guid("99999999-0000-0000-0000-000000000000"),
                            DataEntrada = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "10B",
                            MotivoInternacao = "Infecção respiratória",
                            ObservacoesClinicas = "Paciente em tratamento com antibióticos.",
                            PacienteId = new Guid("11110000-0000-0000-0000-222222222222"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "205",
                            Setor = "Clinico",
                            StatusInternacao = "Concluído"
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCartaoSUS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PossuiPlanoSaude")
                        .HasColumnType("bit");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoSanguineo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CPF = "123.456.789-00",
                            DataNascimento = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria.santos@example.com",
                            EnderecoCompleto = "Rua das Flores, 123, São Paulo - SP",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Maria dos Santos",
                            NumeroCartaoSUS = "123456789012345",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "(11) 98765-4321",
                            TipoSanguineo = "O+"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CPF = "321.654.987-00",
                            DataNascimento = new DateTime(1990, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carlos.silva@example.com",
                            EnderecoCompleto = "Avenida Central, 456, Rio de Janeiro - RJ",
                            EstadoCivil = "Casado",
                            NomeCompleto = "Carlos Silva",
                            NumeroCartaoSUS = "987654321098765",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "(21) 99876-5432",
                            TipoSanguineo = "A+"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000065"),
                            CPF = "789.123.456-00",
                            DataNascimento = new DateTime(1988, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.lima@example.com",
                            EnderecoCompleto = "Rua dos Andradas, 789, Curitiba - PR",
                            EstadoCivil = "Viúva",
                            NomeCompleto = "Ana Beatriz Lima",
                            NumeroCartaoSUS = "456789123456789",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "(41) 99988-1122",
                            TipoSanguineo = "B-"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000075"),
                            CPF = "987.654.321-99",
                            DataNascimento = new DateTime(1975, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.p.souza@example.com",
                            EnderecoCompleto = "Rua Alvorada, 150, São Paulo - SP",
                            EstadoCivil = "Divorciado",
                            NomeCompleto = "João Pedro Souza",
                            NumeroCartaoSUS = "321987654321987",
                            PossuiPlanoSaude = true,
                            Sexo = "Masculino",
                            Telefone = "(11) 91123-4567",
                            TipoSanguineo = "O+"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000081"),
                            CPF = "123.321.456-77",
                            DataNascimento = new DateTime(1982, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "leticia.ferreira@example.com",
                            EnderecoCompleto = "Rua das Laranjeiras, 222, Curitiba - PR",
                            EstadoCivil = "Viúva",
                            NomeCompleto = "Letícia Ramos Ferreira",
                            NumeroCartaoSUS = "556644332211009",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "(41) 99876-1122",
                            TipoSanguineo = "B-"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CPF = "213.546.789-55",
                            DataNascimento = new DateTime(1977, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bruno.dias@example.com",
                            EnderecoCompleto = "Rua das Palmeiras, 999, São Paulo - SP",
                            EstadoCivil = "Divorciado",
                            NomeCompleto = "Bruno Henrique Dias",
                            NumeroCartaoSUS = "112233445566778",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "(11) 98877-6655",
                            TipoSanguineo = "AB+"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CPF = "876.543.210-09",
                            DataNascimento = new DateTime(1982, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luciana.ferreira@example.com",
                            EnderecoCompleto = "Rua Sete de Setembro, 100, Curitiba - PR",
                            EstadoCivil = "Viúva",
                            NomeCompleto = "Luciana Marques Ferreira",
                            NumeroCartaoSUS = "778899001122334",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "(41) 98564-1122",
                            TipoSanguineo = "O-"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CPF = "234.567.890-10",
                            DataNascimento = new DateTime(1975, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "henrique.santos@example.com",
                            EnderecoCompleto = "Rua da Paz, 789, Fortaleza - CE",
                            EstadoCivil = "Divorciado",
                            NomeCompleto = "Henrique Tavares dos Santos",
                            NumeroCartaoSUS = "445566778899000",
                            PossuiPlanoSaude = true,
                            Sexo = "Masculino",
                            Telefone = "(85) 99888-1122",
                            TipoSanguineo = "AB+"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            CPF = "321.123.456-78",
                            DataNascimento = new DateTime(1985, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luciana.rocha@example.com",
                            EnderecoCompleto = "SHN Quadra 5, Bloco C, Brasília - DF",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Luciana Mendes Rocha",
                            NumeroCartaoSUS = "889900112233445",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "(61) 99123-4567",
                            TipoSanguineo = "O-"
                        },
                        new
                        {
                            Id = new Guid("11110000-0000-0000-0000-222222222222"),
                            CPF = "123.456.789-01",
                            DataNascimento = new DateTime(1985, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.rocha@example.com",
                            EnderecoCompleto = "Rua das Flores, 789, São Paulo - SP",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Ana Beatriz Rocha",
                            NumeroCartaoSUS = "123456789123456",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "(11) 91234-5678",
                            TipoSanguineo = "O-"
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.Prescricao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReacoesAdversas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusPrescricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViaAdministracao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Prescricoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AtendimentoId = new Guid("55555555-5555-5555-5555-555555555555"),
                            DataInicio = new DateTime(2024, 6, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "500mg",
                            Frequencia = "8/8h",
                            Medicamento = "Paracetamol",
                            Observacoes = "Tomar após as refeições",
                            ProfissionalId = new Guid("44444444-4444-4444-4444-444444444444"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            AtendimentoId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            DataInicio = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "400mg",
                            Frequencia = "12/12h",
                            Medicamento = "Ibuprofeno",
                            Observacoes = "Tomar em caso de dor intensa",
                            ProfissionalId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            StatusPrescricao = "Pendente",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000006a"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000069"),
                            DataInicio = new DateTime(2025, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "50mg",
                            Frequencia = "1x ao dia",
                            Medicamento = "Losartana",
                            Observacoes = "Manter monitoramento da pressão arterial",
                            ProfissionalId = new Guid("00000000-0000-0000-0000-000000000068"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000007a"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000079"),
                            DataInicio = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "20mg",
                            Frequencia = "Antes do café da manhã",
                            Medicamento = "Omeprazol",
                            Observacoes = "Reavaliar após 30 dias de uso contínuo",
                            ProfissionalId = new Guid("00000000-0000-0000-0000-000000000078"),
                            StatusPrescricao = "Finalizada",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000086"),
                            AtendimentoId = new Guid("00000000-0000-0000-0000-000000000085"),
                            DataInicio = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "50mg",
                            Frequencia = "1 vez ao dia",
                            Medicamento = "Atenolol",
                            Observacoes = "Reavaliar em 7 dias com novo eletrocardiograma",
                            ProfissionalId = new Guid("00000000-0000-0000-0000-000000000084"),
                            StatusPrescricao = "Em uso",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            AtendimentoId = new Guid("10000000-0000-0000-0000-000000000005"),
                            DataInicio = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "1g",
                            Frequencia = "8/8h",
                            Medicamento = "Dipirona Sódica",
                            Observacoes = "Suspender após 7 dias, se não houver dor.",
                            ProfissionalId = new Guid("10000000-0000-0000-0000-000000000004"),
                            StatusPrescricao = "Encerrada",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000006"),
                            AtendimentoId = new Guid("20000000-0000-0000-0000-000000000005"),
                            DataInicio = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "850mg",
                            Frequencia = "2x ao dia",
                            Medicamento = "Metformina",
                            Observacoes = "Tomar após as principais refeições",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000004"),
                            StatusPrescricao = "Em uso",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            AtendimentoId = new Guid("30000000-0000-0000-0000-000000000005"),
                            DataInicio = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "50mg",
                            Frequencia = "1x ao dia",
                            Medicamento = "Losartana",
                            Observacoes = "Preferencialmente pela manhã",
                            ProfissionalId = new Guid("30000000-0000-0000-0000-000000000004"),
                            StatusPrescricao = "Em uso",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000006"),
                            AtendimentoId = new Guid("40000000-0000-0000-0000-000000000005"),
                            DataInicio = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "1%",
                            Frequencia = "2x ao dia",
                            Medicamento = "Pomada de Hidrocortisona",
                            Observacoes = "Aplicar nas áreas afetadas após limpeza da pele",
                            ProfissionalId = new Guid("40000000-0000-0000-0000-000000000004"),
                            StatusPrescricao = "Em uso",
                            ViaAdministracao = "Tópica"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-0000-0000-0000-000000000000"),
                            AtendimentoId = new Guid("99999999-0000-0000-0000-000000000000"),
                            DataInicio = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "50mg",
                            Frequencia = "12/12h",
                            Medicamento = "Losartana",
                            Observacoes = "Tomar após o almoço",
                            ProfissionalId = new Guid("77777777-0000-0000-0000-888888888888"),
                            StatusPrescricao = "Pendente",
                            ViaAdministracao = "Oral"
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.ProfissionalSaude", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargaHorariaSemanal")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroConselho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("ProfissionaisSaude");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Ativo = true,
                            CPF = "987.654.321-00",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.oliveira@example.com",
                            EspecialidadeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            NomeCompleto = "Dr. João Oliveira",
                            RegistroConselho = "CRM123456",
                            Telefone = "(11) 91234-5678",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Ativo = true,
                            CPF = "456.789.123-00",
                            CargaHorariaSemanal = 30,
                            DataAdmissao = new DateTime(2018, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "helena.costa@example.com",
                            EspecialidadeId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            NomeCompleto = "Dra. Helena Costa",
                            RegistroConselho = "CRM654321",
                            Telefone = "(31) 92345-6789",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000068"),
                            Ativo = true,
                            CPF = "654.321.987-00",
                            CargaHorariaSemanal = 36,
                            DataAdmissao = new DateTime(2016, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marcelo.farias@example.com",
                            EspecialidadeId = new Guid("00000000-0000-0000-0000-000000000067"),
                            NomeCompleto = "Dr. Marcelo Farias",
                            RegistroConselho = "CRM789456",
                            Telefone = "(51) 91234-5678",
                            TipoRegistro = "CRM",
                            Turno = "Integral"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000078"),
                            Ativo = true,
                            CPF = "321.987.654-11",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2019, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "camila.andrade@example.com",
                            EspecialidadeId = new Guid("00000000-0000-0000-0000-000000000077"),
                            NomeCompleto = "Dra. Camila Andrade",
                            RegistroConselho = "CRM123789",
                            Telefone = "(21) 93456-7890",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000084"),
                            Ativo = true,
                            CPF = "789.456.123-33",
                            CargaHorariaSemanal = 20,
                            DataAdmissao = new DateTime(2016, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marcelo.tavares@example.com",
                            EspecialidadeId = new Guid("00000000-0000-0000-0000-000000000083"),
                            NomeCompleto = "Dr. Marcelo Tavares",
                            RegistroConselho = "CRM998877",
                            Telefone = "(61) 98765-4321",
                            TipoRegistro = "CRM",
                            Turno = "Noite"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Ativo = true,
                            CPF = "654.987.321-00",
                            CargaHorariaSemanal = 44,
                            DataAdmissao = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "renan.oliveira@example.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000003"),
                            NomeCompleto = "Dr. Renan Oliveira",
                            RegistroConselho = "CRM443322",
                            Telefone = "(11) 97654-3210",
                            TipoRegistro = "CRM",
                            Turno = "Integral"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            Ativo = true,
                            CPF = "321.654.987-11",
                            CargaHorariaSemanal = 36,
                            DataAdmissao = new DateTime(2019, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "camila.prado@example.com",
                            EspecialidadeId = new Guid("20000000-0000-0000-0000-000000000003"),
                            NomeCompleto = "Dra. Camila Prado",
                            RegistroConselho = "CRM998877",
                            Telefone = "(41) 97777-1234",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            Ativo = true,
                            CPF = "567.123.890-22",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.nogueira@example.com",
                            EspecialidadeId = new Guid("30000000-0000-0000-0000-000000000003"),
                            NomeCompleto = "Dr. João Marcelo Nogueira",
                            RegistroConselho = "CRM112233",
                            Telefone = "(85) 99666-4455",
                            TipoRegistro = "CRM",
                            Turno = "Integral"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000004"),
                            Ativo = true,
                            CPF = "654.321.987-00",
                            CargaHorariaSemanal = 24,
                            DataAdmissao = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fernanda.albuquerque@example.com",
                            EspecialidadeId = new Guid("40000000-0000-0000-0000-000000000003"),
                            NomeCompleto = "Dra. Fernanda Albuquerque",
                            RegistroConselho = "CRM998877",
                            Telefone = "(61) 99887-6655",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-888888888888"),
                            Ativo = true,
                            CPF = "987.654.321-00",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2016, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marcos.pereira@example.com",
                            EspecialidadeId = new Guid("55555555-0000-0000-0000-666666666666"),
                            NomeCompleto = "Dr. Marcos Pereira",
                            RegistroConselho = "CRM987654",
                            Telefone = "(21) 92345-6789",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.Prontuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroProntuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesGerais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Prontuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            DataAbertura = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR123456",
                            ObservacoesGerais = "Paciente com histórico de hipertensão.",
                            PacienteId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            DataAbertura = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR654321",
                            ObservacoesGerais = "Paciente com histórico de enxaqueca crônica.",
                            PacienteId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000066"),
                            DataAbertura = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR789456",
                            ObservacoesGerais = "Paciente com histórico de arritmia cardíaca.",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000065")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000076"),
                            DataAbertura = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR123987",
                            ObservacoesGerais = "Paciente apresenta episódios frequentes de refluxo gástrico.",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000075")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000082"),
                            DataAbertura = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR789123",
                            ObservacoesGerais = "Histórico de hipertensão e episódios de taquicardia.",
                            PacienteId = new Guid("00000000-0000-0000-0000-000000000081")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            DataAbertura = new DateTime(2023, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR123999",
                            ObservacoesGerais = "Fratura recente no tornozelo direito. Histórico de osteoporose.",
                            PacienteId = new Guid("10000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            DataAbertura = new DateTime(2022, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR789456",
                            ObservacoesGerais = "Diabetes tipo 2 diagnosticado em 2020.",
                            PacienteId = new Guid("20000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            DataAbertura = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR2023123",
                            ObservacoesGerais = "Histórico de hipertensão e sedentarismo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            DataAbertura = new DateTime(2024, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR2024123",
                            ObservacoesGerais = "Paciente com histórico de dermatite atópica.",
                            PacienteId = new Guid("40000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("33333333-0000-0000-0000-444444444444"),
                            DataAbertura = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PR987654",
                            ObservacoesGerais = "Paciente com histórico de hipertensão.",
                            PacienteId = new Guid("11110000-0000-0000-0000-222222222222")
                        });
                });

            modelBuilder.Entity("HOSPISIM.Entities.AltaHospitalar", b =>
                {
                    b.HasOne("HOSPISIM.Entities.Internacao", "Internacao")
                        .WithOne("AltaHospitalar")
                        .HasForeignKey("HOSPISIM.Entities.AltaHospitalar", "InternacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Internacao");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Atendimento", b =>
                {
                    b.HasOne("HOSPISIM.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HOSPISIM.Entities.ProfissionalSaude", "Profissional")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HOSPISIM.Entities.Prontuario", "Prontuario")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProntuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");

                    b.Navigation("Prontuario");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Exame", b =>
                {
                    b.HasOne("HOSPISIM.Entities.Atendimento", "Atendimento")
                        .WithMany("Exames")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Internacao", b =>
                {
                    b.HasOne("HOSPISIM.Entities.Atendimento", "Atendimento")
                        .WithOne("Internacao")
                        .HasForeignKey("HOSPISIM.Entities.Internacao", "AtendimentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HOSPISIM.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Prescricao", b =>
                {
                    b.HasOne("HOSPISIM.Entities.Atendimento", "Atendimento")
                        .WithMany("Prescricoes")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HOSPISIM.Entities.ProfissionalSaude", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("HOSPISIM.Entities.ProfissionalSaude", b =>
                {
                    b.HasOne("HOSPISIM.Entities.Especialidade", "Especialidade")
                        .WithMany("Profissionais")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Prontuario", b =>
                {
                    b.HasOne("HOSPISIM.Entities.Paciente", "Paciente")
                        .WithMany("Prontuarios")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Atendimento", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("Internacao")
                        .IsRequired();

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Especialidade", b =>
                {
                    b.Navigation("Profissionais");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Internacao", b =>
                {
                    b.Navigation("AltaHospitalar")
                        .IsRequired();
                });

            modelBuilder.Entity("HOSPISIM.Entities.Paciente", b =>
                {
                    b.Navigation("Prontuarios");
                });

            modelBuilder.Entity("HOSPISIM.Entities.ProfissionalSaude", b =>
                {
                    b.Navigation("Atendimentos");
                });

            modelBuilder.Entity("HOSPISIM.Entities.Prontuario", b =>
                {
                    b.Navigation("Atendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
